setwd("/Volumes/sheynkman/projects/zhang_mouse_aging")
# ---- Import libraries ----
library(dplyr)
library(readr)
# ---- Input and Output directories ----
input_dir <- './00_peptide_data_20240702'
output_dir <- '../01_filter_data/01.3_view_peptide_data'
# ---- Create output directory ----
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
output_dir <- './01_filter_data/01.3_view_peptide_data'
# ---- Create output directory ----
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# ---- Get all the files in the input directory ----
# This corresponds to the mouse tissue peptide results from Tian
file_list <- list.files(input_dir, full.names = TRUE)
process_file <- function(file_path) {
# Read the data
data <- read_csv(file_path)
# Clean the peptide sequences
data <- data %>%
mutate(PeptideSequenceClean = sub("^.\\.(.*)\\..$", "\\1", PeptideSequence))
# Get statistics
distinct_proteins <- data %>% distinct(ProteinId) %>% nrow()
distinct_proteins_tr <- data %>% filter(grepl("^tr\\|", ProteinId)) %>% distinct(ProteinId) %>% nrow()
distinct_proteins_sp <- data %>% filter(grepl("^sp\\|", ProteinId)) %>% distinct(ProteinId) %>% nrow()
total_genes <- data %>% distinct(GeneSymbol) %>% nrow()
total_genes_tr <- data %>% filter(grepl("^tr\\|", ProteinId)) %>% distinct(GeneSymbol) %>% nrow()
total_genes_sp <- data %>% filter(grepl("^sp\\|", ProteinId)) %>% distinct(GeneSymbol) %>% nrow()
unique_group_ids <- data %>% distinct(GroupId) %>% nrow()
cleaned_peptides <- data %>% select(PeptideSequenceClean)
# extract filename without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the output file path
output_file <- file.path(output_dir, paste0(file_name, '_peptide_summary.txt'))
# Open a connection to a file
sink(output_file)
# Your analysis and printing results
cat("Number of distinct ProteinId:", distinct_proteins, "\n")
cat("Number of distinct ProteinId (tr):", distinct_proteins_tr, "\n")
cat("Number of distinct ProteinId (sp):", distinct_proteins_sp, "\n")
cat("Total number of genes:", total_genes, "\n")
cat("Number of genes (tr):", total_genes_tr, "\n")
cat("Number of genes (sp):", total_genes_sp, "\n")
cat("Unique number of GroupId:", unique_group_ids, "\n")
# If you want to print the cleaned peptide sequences as well
cat("Cleaned Peptide Sequences:\n")
print(cleaned_peptides)
# Close the connection to the file
sink()
}
# Loop through each file
lapply(file_list, process_file)
# ---- Get all the files in the input directory ----
# This corresponds to the mouse tissue peptide results from Tian
file_list <- list.files(input_dir, full.names = TRUE, pattern = "\\.csv$")
process_file <- function(file_path) {
# Read the data
data <- read_csv(file_path)
# Clean the peptide sequences
data <- data %>%
mutate(PeptideSequenceClean = sub("^.\\.(.*)\\..$", "\\1", PeptideSequence))
# Get statistics
distinct_proteins <- data %>% distinct(ProteinId) %>% nrow()
distinct_proteins_tr <- data %>% filter(grepl("^tr\\|", ProteinId)) %>% distinct(ProteinId) %>% nrow()
distinct_proteins_sp <- data %>% filter(grepl("^sp\\|", ProteinId)) %>% distinct(ProteinId) %>% nrow()
total_genes <- data %>% distinct(GeneSymbol) %>% nrow()
total_genes_tr <- data %>% filter(grepl("^tr\\|", ProteinId)) %>% distinct(GeneSymbol) %>% nrow()
total_genes_sp <- data %>% filter(grepl("^sp\\|", ProteinId)) %>% distinct(GeneSymbol) %>% nrow()
unique_group_ids <- data %>% distinct(GroupId) %>% nrow()
cleaned_peptides <- data %>% select(PeptideSequenceClean)
# extract filename without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the output file path
output_file <- file.path(output_dir, paste0(file_name, '_peptide_summary.txt'))
# Open a connection to a file
sink(output_file)
# Your analysis and printing results
cat("Number of distinct ProteinId:", distinct_proteins, "\n")
cat("Number of distinct ProteinId (tr):", distinct_proteins_tr, "\n")
cat("Number of distinct ProteinId (sp):", distinct_proteins_sp, "\n")
cat("Total number of genes:", total_genes, "\n")
cat("Number of genes (tr):", total_genes_tr, "\n")
cat("Number of genes (sp):", total_genes_sp, "\n")
cat("Unique number of GroupId:", unique_group_ids, "\n")
# If you want to print the cleaned peptide sequences as well
cat("Cleaned Peptide Sequences:\n")
print(cleaned_peptides)
# Close the connection to the file
sink()
}
# Loop through each file
lapply(file_list, process_file)
# Load necessary library
library(dplyr)
# Function to extract base peptide sequence and remove non-alphabet characters
extract_base_sequence <- function(peptide) {
peptide <- gsub("^[A-Z]\\.|\\.[A-Z]$", "", peptide)
gsub("[^A-Za-z]", "", peptide) # Remove non-alphabet characters
}
# Function to clean a single file
clean_file <- function(input_path, output_path) {
data <- read.csv(input_path)
cleaned_data <- data %>%
select(ProteinId, GeneSymbol, PeptideSequence) %>%
mutate(PeptideSequence = sapply(PeptideSequence, extract_base_sequence))
write.csv(cleaned_data, output_path, row.names = FALSE)
}
# Directory containing the input files
input_directory <- "./00_peptide_data_20240702"
# Directory to save the cleaned files
output_directory <- "./01_filter_data/04_make_clean_peptide_tables"
# Ensure the output directory exists
if (!dir.exists(output_directory)) {
dir.create(output_directory, recursive = TRUE)
}
# List all CSV files in the input directory
file_list <- list.files(input_directory, pattern = "*.csv", full.names = TRUE)
# Process each file
for (input_path in file_list) {
# Create the output file path
output_path <- file.path(output_directory, basename(input_path))
# Clean the file
clean_file(input_path, output_path)
}
# Directory to save the cleaned files
output_directory <- "./01_filter_data/01.4_make_clean_peptide_tables"
# Ensure the output directory exists
if (!dir.exists(output_directory)) {
dir.create(output_directory, recursive = TRUE)
}
# List all CSV files in the input directory
file_list <- list.files(input_directory, pattern = "*.csv", full.names = TRUE)
# Process each file
for (input_path in file_list) {
# Create the output file path
output_path <- file.path(output_directory, basename(input_path))
# Clean the file
clean_file(input_path, output_path)
}
# Function to extract base peptide sequence and remove non-alphabet characters
extract_base_sequence <- function(peptide) {
peptide <- gsub("^[A-Z]\\.|\\.[A-Z]$", "", peptide)
gsub("[^A-Za-z]", "", peptide) # Remove non-alphabet characters
}
# Function to clean a single file
clean_file <- function(input_path, output_path) {
data <- read.csv(input_path)
cleaned_data <- data %>%
select(ProteinId, GeneSymbol, PeptideSequence) %>%
mutate(PeptideSequence = sapply(PeptideSequence, extract_base_sequence))
write.csv(cleaned_data, output_path, row.names = FALSE)
}
# Directory containing the input files
input_directory <- "./00_peptide_data_20240702"
# Directory to save the cleaned files
output_directory <- "./01_filter_data/01.4_make_clean_peptide_tables"
# Ensure the output directory exists
if (!dir.exists(output_directory)) {
dir.create(output_directory, recursive = TRUE)
}
# List all CSV files in the input directory
file_list <- list.files(input_directory, pattern = "*.csv", full.names = TRUE)
# Process each file
for (input_path in file_list) {
# Create the output file path
output_path <- file.path(output_directory, basename(input_path))
# Clean the file
clean_file(input_path, output_path)
}
library(cleaver)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cleaver")
library(cleaver)
library(Biostrings)
library(dplyr)
library(ggplot2)
library(progress)
library(stringr)
library(tidyr)
library(data.table)
library(janitor)
# read in fasta
fasta <- readAAStringSet("./00_gencode_mouse_models/gencode.vM35.pc_translations.fa")
# tryptic digest
peptides <- cleave(fasta, enzym = "trypsin", missedCleavages= 0, unique=TRUE)
peptides_df <- as.data.frame(peptides)
pep.df.raw <- as.data.table(peptides) # data table for faster processing
# tidy digested peptides
pep.df <- pep.df.raw %>%
select(-group) %>%
separate(col = group_name, into = paste0("col", 1:8), sep = "\\|") %>%
select(gene_name = col7, transcript_name = col6, pep_seq = value) %>%
mutate("pep_length" = str_length(pep_seq)) %>%
filter(pep_length >= 5 & pep_length <= 75)
# get number of isoform mappings
pep.df <- pep.df %>%
group_by(gene_name) %>%
mutate(iso_total = n_distinct(transcript_name)) %>%
ungroup()
# categorize peptides by number of isoform mappings
collapsed.pep.df <- pep.df %>%
group_by(gene_name, iso_total, pep_seq) %>%
summarize(transcript_name= toString(transcript_name), count = n()) %>%
mutate(category = case_when(
count == iso_total ~ "constitutive",
count == 1 ~ "isoform-specific",
TRUE ~ "isoform-informative"
))
# get gene specificity of peptide mappings
df.gene.nonspecific <- collapsed.pep.df %>%
get_dupes(pep_seq) %>%
group_by(pep_seq) %>%
summarize(multigene.IDs = toString(transcript_name), genes = toString(gene_name)) %>%
ungroup()
# join isoform mapping and gene specificity results
collapsed.pep.df.joined <- collapsed.pep.df %>%
left_join(df.gene.nonspecific, by = "pep_seq")
collapsed.pep.df.joined <- collapsed.pep.df.joined %>%
mutate(gene.specificity = ifelse(is.na(multigene.IDs), "gene-specific", "not gene-specific"))
# write out results
output_dir <- "./01_filter_data/01.5_peptide_to_isoform_mapping/"
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
output_file <- file.path(output_dir, 'tryptic_peptide_to_mouse_protein_mapping.csv')
write.csv(collapsed.pep.df.joined, file = output_file, row.names = FALSE)
library(tidyverse)
# read in in silico tryptic peptide annotations
pep_map <- read_csv('./01_filter_data/01.5_peptide_to_isoform_mapping/tryptic_peptide_to_mouse_protein_mapping.csv')
# read in experimentally identified peptides
experiment_files <- list.files(path='./01_filter_data/01.4_make_clean_peptide_tables/', pattern='p*csv', full.names=TRUE)
# initialize list to hold the data frames
experiment_dfs <- list()
# Read each experimental file into a data frame and store in the list
for (file in experiment_files) {
experiment_name <- tools::file_path_sans_ext(basename(file))
experiment_df <- read_csv(file)
experiment_df <- experiment_df[1:3] %>%
select(PeptideSequence) %>%
rename(!!experiment_name := PeptideSequence)
experiment_dfs[[experiment_name]] <- experiment_df
}
setwd("/Volumes/sheynkman/projects/zhang_mouse_aging")
library(tidyverse)
# read in in silico tryptic peptide annotations
pep_map <- read_csv('./01_filter_data/01.5_peptide_to_isoform_mapping/tryptic_peptide_to_mouse_protein_mapping.csv')
# read in experimentally identified peptides
experiment_files <- list.files(path='./01_filter_data/01.4_make_clean_peptide_tables/', pattern='p*csv', full.names=TRUE)
# initialize list to hold the data frames
experiment_dfs <- list()
# Read each experimental file into a data frame and store in the list
for (file in experiment_files) {
experiment_name <- tools::file_path_sans_ext(basename(file))
experiment_df <- read_csv(file)
experiment_df <- experiment_df[1:3] %>%
select(PeptideSequence) %>%
rename(!!experiment_name := PeptideSequence)
experiment_dfs[[experiment_name]] <- experiment_df
}
# Function to check if peptides are present in the experimental data frames
check_presence <- function(peptide, experiment_df) {
ifelse(peptide %in% experiment_df[[1]], 1, 0)
}
# Add columns to pep_map for each experiment
for (experiment_name in names(experiment_dfs)) {
print(paste("Adding column for", experiment_name))
pep_map[[experiment_name]] <- sapply(pep_map$pep_seq, check_presence, experiment_df = experiment_dfs[[experiment_name]])
print(paste("Column added for", experiment_name))
print(head(pep_map[[experiment_name]]))
}
# write out peptide map with the peptides found in Tian's experiments marked
write_csv(pep_map, './01_filter_data/01.4_isoform_annotation_of_experi_peptides/peptide_to_isoform_mapping_with_experimental_peptides.csv')
# write out peptide map with the peptides found in Tian's experiments marked
write_csv(pep_map, './01_filter_data/01.4_isoform_annotation_of_experi_peptides/peptide_to_isoform_mapping_with_experimental_peptides.csv')
# Read each experimental file into a data frame and store in the list
for (file in experiment_files) {
print(paste("Processing file:", file))
experiment_name <- tools::file_path_sans_ext(basename(file))
print(paste("Experiment name:", experiment_name))
experiment_df <- read_csv(file)
print("First few rows of experiment_df before selection:")
print(head(experiment_df))
experiment_df <- experiment_df %>%
select(PeptideSequence) %>%
rename(!!experiment_name := PeptideSequence)
print("First few rows of experiment_df after selection and renaming:")
print(head(experiment_df))
experiment_dfs[[experiment_name]] <- experiment_df
print(paste("Stored data frame for", experiment_name))
}
# read in experimentally identified peptides
experiment_files <- list.files(path='./01_filter_data/01.2_make_clean_peptide_tables/', pattern='p*csv', full.names=TRUE)
# Read each experimental file into a data frame and store in the list
for (file in experiment_files) {
print(paste("Processing file:", file))
experiment_name <- tools::file_path_sans_ext(basename(file))
print(paste("Experiment name:", experiment_name))
experiment_df <- read_csv(file)
print("First few rows of experiment_df before selection:")
print(head(experiment_df))
experiment_df <- experiment_df %>%
select(PeptideSequence) %>%
rename(!!experiment_name := PeptideSequence)
print("First few rows of experiment_df after selection and renaming:")
print(head(experiment_df))
experiment_dfs[[experiment_name]] <- experiment_df
print(paste("Stored data frame for", experiment_name))
}
# Read the CSV file
data <- read_csv("./01_filter_data/01.4_isoform_annotation_of_experi_peptides/peptide_to_isoform_mapping_with_experimental_peptides.csv")
# Filter the data for isoform-specific peptides and at least one '1' in the sample columns
filtered_data <- data %>%
filter(category == "isoform-specific") %>% # Select isoform-specific peptides
filter(pep31811 == 1 | pep31812 == 1 | pep31813 == 1 | pep31814 == 1) %>% # At least one '1' in the last four columns
group_by(gene_name) %>% # Group by gene
filter(n_distinct(transcript_name) >= 2) %>% # Keep genes with two or more unique isoforms
ungroup()
# Filter the data for isoform-specific peptides and at least one '1' in the sample columns
filtered_data <- data %>%
filter(category == "isoform-specific") %>% # Select isoform-specific peptides
filter(sn_pep31811_pep_07022024 == 1 | sn_pep31812_pep_07022024 == 1 | sn_pep31813_pep_07022024 == 1 | sn_pep31814_pep__07022024 == 1) %>% # At least one '1' in the last four columns
group_by(gene_name) %>% # Group by gene
filter(n_distinct(transcript_name) >= 2) %>% # Keep genes with two or more unique isoforms
ungroup()
# Check if the directory exists
output_dir <- "./01_filter_data/01.5_filtered_co_expressed_isoforms"
if (!dir.exists(output_dir)) {
# Create the directory
dir.create(output_dir, recursive = TRUE)
cat("Directory created:", output_dir, "\n")
} else {
cat("Directory already exists:", output_dir, "\n")
}
# Write the filtered data to a CSV file
write_csv(filtered_data, paste0(output_dir, "/filtered_co_expressed_isoforms.csv"))
# Get the number of non-redundant entries in each column
non_redundant_counts <- filtered_data %>%
summarize(across(everything(), n_distinct))
# Write the non-redundant counts to a CSV file
write_csv(non_redundant_counts, paste0(output_dir, "/non_redundant_counts.csv"))
# Format an output file for input into Pogo to make Genome Browser tracks
# Restructure the dataframe for input into Pogo
# Outputs are named first by TMT or TOM, their ID number, WTC11, then unfrac or 8frac
setwd("/Volumes/sheynkman/projects/zhang_mouse_aging")
library(readr)
library(dplyr)
library(stringr)
# 31811
pq31811_df <- read_csv("00_peptide_data_20240702/sn_pep31811_pep_07022024.csv")
restructured_pogo_df <- pq31811_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "pq31811", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = PeptideSequence, PSMs, Quant) #the dataframe we're creating will only have these columns
file_path <- "02_Peptides2Pogo/sn_pq31811_peptides.txt"
write.table(restructured_pogo_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
# 31812
pq31812_df <- read_csv("00_peptide_data_20240702/sn_pep31812_pep_07022024.csv")
restructured_pogo_df <- pq31812_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "pq31812", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = PeptideSequence, PSMs, Quant) #the dataframe we're creating will only have these columns
file_path <- "02_Peptides2Pogo/sn_pq31812_peptides.txt"
write.table(restructured_pogo_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
# 31813
pq31813_df <- read_csv("00_peptide_data_20240702/sn_pep31813_pep_07022024.csv")
output_dir <- './01_filter_data/01.1_view_peptide_data'
restructured_pogo_df <- pq31813_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "pq31813", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = PeptideSequence, PSMs, Quant) #the dataframe we're creating will only have these columns
file_path <- "02_Peptides2Pogo/sn_pq31813_peptides.txt"
write.table(restructured_pogo_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
# 31814
pq31814_df <- read_csv("00_peptide_data_20240702/sn_pep31814_pep_07022024.csv")
restructured_pogo_df <- pq31814_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "pq31814", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = PeptideSequence, PSMs, Quant) #the dataframe we're creating will only have these columns
# 31814
pq31814_df <- read_csv("00_peptide_data_20240702/sn_pep31814__pep_07022024.csv")
# 31814
pq31814_df <- read_csv("00_peptide_data_20240702/sn_pep31814_pep__07022024.csv")
restructured_pogo_df <- pq31814_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "pq31814", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = PeptideSequence, PSMs, Quant) #the dataframe we're creating will only have these columns
file_path <- "02_Peptides2Pogo/sn_pq31814_peptides.txt"
write.table(restructured_pogo_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
# annotated isoforms
experi_df <- read_csv("01_filter_data/01.4_isoform_annotation_of_experi_peptides/peptide_to_isoform_mapping_with_experimental_peptides.csv")
restructured_pogo_df <- experi_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "experimental_pep", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = pep_seq, PSMs, Quant) #the dataframe we're creating will only have these columns
file_path <- "experimental_peptides.txt"
write.table(restructured_pogo_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
# coexpressed
coexpressed_df <- read_csv("01_filter_data/01.5_filtered_co_expressed_isoforms/filtered_co_expressed_isoforms.csv")
restructured_pogo_df <- all_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "coexpressed", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = pep_seq, PSMs, Quant) #the dataframe we're creating will only have these columns
restructured_pogo_df <- coexpressed_df %>%
mutate( #mutate just allows us to modify and add columns!
Experiment = "coexpressed", #create column called "Experiment" that is filled with the experiment type
PSMs = 1, #create column called "PSMs" and fill with 1
Quant = 1 #create column called "Quant" and fill with 1
) %>%
select(Experiment, Distinct_Peptide = pep_seq, PSMs, Quant) #the dataframe we're creating will only have these columns
file_path <- "coexpressed_peptides.txt"
write.table(restructured_pogo_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
