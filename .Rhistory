# Format an output file for input into Pogo to make Genome Browser tracks
# Restructure the dataframe for input into Pogo
# Outputs are named first by TMT or TOM, their ID number, WTC11, then unfrac or 8frac
setwd("/Volumes/sheynkman/projects/zhang_mouse_aging")
library(tidyverse)
# read in in silico tryptic peptide annotations
pep_map <- read_csv('./05_peptide_to_isoform_mapping/tryptic_peptide_to_mouse_protein_mapping.csv')
# read in experimentally identified peptides
experiment_files <- list.files(path='./04_make_clean_peptide_tables/', pattern='p*csv', full.names=TRUE)
# initialize list to hold the data frames
experiment_dfs <- list()
# Read each experimental file into a data frame and store in the list
for (file in experiment_files) {
experiment_name <- tools::file_path_sans_ext(basename(file))
experiment_df <- read_csv(file)
experiment_df <- experiment_df[1:3] %>%
select(PeptideSequence) %>%
rename(!!experiment_name := PeptideSequence)
experiment_dfs[[experiment_name]] <- experiment_df
}
# Function to check if peptides are present in the experimental data frames
check_presence <- function(peptide, experiment_df) {
ifelse(peptide %in% experiment_df[[1]], 1, 0)
}
# Add columns to pep_map for each experiment
for (experiment_name in names(experiment_dfs)) {
print(paste("Adding column for", experiment_name))
pep_map[[experiment_name]] <- sapply(pep_map$pep_seq, check_presence, experiment_df = experiment_dfs[[experiment_name]])
print(paste("Column added for", experiment_name))
print(head(pep_map[[experiment_name]]))
}
# Add columns to pep_map for each experiment
for (experiment_name in names(experiment_dfs)) {
print(paste("Adding column for", experiment_name))
pep_map[[experiment_name]] <- sapply(pep_map$pep_seq, check_presence, experiment_df = experiment_dfs[[experiment_name]])
print(paste("Column added for", experiment_name))
print(head(pep_map[[experiment_name]]))
}
